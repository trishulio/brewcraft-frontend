pipeline {
    agent {
        label 'docker'
    }

    environment {
        HOST_WORKSPACE = env.WORKSPACE.replaceFirst(env.WORKSPACE_HOME, env.HOST_WORKSPACE_HOME)
    }

    parameters {
        string(name: 'initialDelay', defaultValue: '0', description: 'Wait for N minutes before deploying')
        string(name: 'branch', defaultValue: 'master', description: 'Branch to deploy (Note: This branch should be available as deployment on CDN)')
        choice(name: 'environment', choices: ['staging', 'production'], description: 'Environment to deploy to')
        booleanParam(name: 'rollingUpdate', defaultValue: true, description: 'Unchecking will first uninstall the existing deployment and then perform a fresh install. (Note: In most cases, you don\'t need this)')
    }

    stages {
        stage ('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Initialize') {
            steps {
                script {
                    def envConfigs = [
                        "production": [
                            "kubeConfigId": "KUBE_CONFIG_PRODUCTION",
                            "namespace": "production",
                            "valuesFile": "values-production.yaml"
                        ],
                        // Staging
                        "staging": [
                            "kubeConfigId": "KUBE_CONFIG_STAGING",
                            "namespace": "staging",
                            "valuesFile": "values-staging.yaml"
                        ]
                    ]

                    def envConfig = envConfigs[params.environment];

                    KUBE_CREDS_ID = envConfig['kubeConfigId'];
                    VALUES_FILE = envConfig['valuesFile'];
                    NAMESPACE = envConfig['namespace'];

                    INDEX_URL = params.branch == 'release' ? "https://brewcraft-frontend.pages.dev/" : "https://${params.branch}.brewcraft-frontend.pages.dev/";
                }
            }
        }

        stage('Setup KubeConfig') {
            environment {
                KUBE_CREDS = credentials("${KUBE_CREDS_ID}")
            }

            steps {
                sh """
                    mkdir -p "$WORKSPACE/.kube"
                    cp "$KUBE_CREDS" "$WORKSPACE/.kube/config"
                """
            }
        }

        stage('Waiting') {
            steps {
                script {
                    sh """
                        sleep ${params.initialDelay}m
                    """
                }
            }
        }

        stage('Undeploy') {
            when {
                expression { !params.rollingUpdate }
            }

            steps {
                // Hack: The sibling container mounts on the host and therefore the mount path needs to be relative to the host, not the parent container. PWD and HOME are manipulated to be relative to the host.
                sh """
                    make undeploy PWD='${HOST_WORKSPACE}' HOME='${HOST_WORKSPACE}' NAMESPACE=${NAMESPACE}
                """
            }
        }

        stage ('Deploy') {
            steps {
                // Hack: The sibling container mounts on the host and therefore the mount path needs to be relative to the host, not the parent container. PWD and HOME are manipulated to be relative to the host.
                sh """
                    make deploy PWD='${HOST_WORKSPACE}' HOME='${HOST_WORKSPACE}' VALUES_FILE=${VALUES_FILE} NAMESPACE=${NAMESPACE} INDEX_URL=${INDEX_URL}
                """
            }
        }
    }
}
