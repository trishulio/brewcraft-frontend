pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'branch', defaultValue: 'master', description: 'Branch to deploy')
        choice(name: 'environment', choices: ['staging', 'production'], description: 'Environment to deploy to')
        booleanParam(name: 'rollingUpdate', defaultValue: true, description: 'Setting to false will first uninstall the existing deployment and then perform a fresh install. In most cases, you don\'t need this.')
    }

    triggers {
        cron('H */4 * * *')
    }

    stages {
        stage ('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Initialize') {
            steps {
                script {
                    def envConfigs = [
                        "production": [
                            "kubeConfigId": "KUBE_CONFIG_PRODUCTION",
                            "namespace": "production",
                            "valuesFile": "values-production.yaml"
                        ],
                        // Staging
                        "staging": [
                            "kubeConfigId": "KUBE_CONFIG_STAGING",
                            "namespace": "staging",
                            "valuesFile": "values-staging.yaml"
                        ]
                    ]

                    def envConfig = envConfigs[params.environment];

                    KUBE_CREDS_ID = envConfig['kubeConfigId'];
                    VALUES_FILE = envConfig['valuesFile'];
                    NAMESPACE = envConfig['namespace'];

                    INDEX_URL = params.branch == 'release' ? "https://fuzzy-potato.pages.dev/" : "https://${params.branch}.fuzzy-potato.pages.dev/dashboard";
                }
            }
        }

        stage('Setup KubeConfig') {
            environment {
                KUBE_CREDS = credentials("${KUBE_CREDS_ID}")
            }

            steps {
                sh """
                    mkdir -p "$WORKSPACE/.kube"
                    cp "$KUBE_CREDS" "$WORKSPACE/.kube/config"
                """
            }
        }

        stage('Undeploy') {
            when {
                expression { !params.rollingUpdate }
            }

            steps {
                sh """
                    make undeploy PWD='${env.WORKSPACE.replaceFirst(env.WORKSPACE_HOME, env.HOST_WORKSPACE_HOME)}' HOME='${env.WORKSPACE.replaceFirst(env.WORKSPACE_HOME, env.HOST_WORKSPACE_HOME)}' NAMESPACE=${NAMESPACE}
                """
            }
        }

        stage ('Deploy') {
            steps {
                // Hack: The sibling container mounts on the host and therefore the mount path needs to be relative to the host, not the parent container. PWD and HOME are manipulated to be relative to the host.
                sh """
                    make deploy PWD='${env.WORKSPACE.replaceFirst(env.WORKSPACE_HOME, env.HOST_WORKSPACE_HOME)}' HOME='${env.WORKSPACE.replaceFirst(env.WORKSPACE_HOME, env.HOST_WORKSPACE_HOME)}' VALUES_FILE=${VALUES_FILE} NAMESPACE=${NAMESPACE} INDEX_URL=${INDEX_URL}
                """
            }
        }
    }
}